class Solution:
    def countEven(self, num: int) -> int:
        '''Every ten numbers (10 to 19, 20 to 29...) has five even-digit-sum numbers.
        The exception is 1 to 9, which has four even-digit-sum numbers.'''
        
        nearestTen = num // 10 * 10
        ''' For the reason above, there are (nearestTen / 
        2 - 1) even-digit-sum numbers between 1 and (nearestTen - 1). Example: There   
        are (1230 / 2 - 1) even-digit-sum numbers between 1 and 1229. '''

        # Only concerned with numbers from nearestTen to num.

        nTen = num // 10 # One-tenth of nearestTen has the same digit sum.
        nearestTenSum = 0

        while nTen >= 10:
            nearestTenSum += (nTen % 10)
            nTen //= 10
        nearestTenSum += nTen # nearestTenSum is the digit sum of nTen and nearestTen

        if num % 10 == 0 and nearestTenSum % 2 == 0: # Checking multiples of 10.
            return num // 2
        elif num % 10 == 0 and nearestTenSum % 2 == 1:
            return num // 2 - 1

        if nearestTenSum % 2 == 0: 
            return -((num % 10 + 1) // (-2)) + nearestTen // 2 - 1
        ''' Example: 60 has even digit sum, there are five
        numbers from 60 to 64. Hence, there are ceil(5/2) even-digit-sum numbers.'''
        else:
            return (num % 10 + 1) // 2 + nearestTen // 2 - 1
